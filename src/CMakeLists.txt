cmake_minimum_required(VERSION 2.6)
set(PROJECT_NAME goobye)
project(${PROJECT_NAME})

if (${CMAKE_C_COMPILER_ID}  STREQUAL MSVC)
set(CMAKE_CXX_FLAGS_DEBUG "-MTd -ZI -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE")
set(CMAKE_CXX_FLAGS_RELEASE "-MT -Ox -fp:fast -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-MT -Ox -fp:fast -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE")
elseif (${CMAKE_C_COMPILER_ID} STREQUAL GCC)
set(CMAKE_CXX_FLAGS_DEBUG "-std=c++17 -static -s -Wall")
set(CMAKE_CXX_FLAGS_RELEASE "-std=c++17 -static -s -Wall")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-std=c++17 -static -s -Wall")
endif()

include_directories(${CMAKE_SOURCE_DIR}/lib)
include_directories(${CMAKE_SOURCE_DIR}/app)

file(GLOB LIB_HEADERS ${CMAKE_SOURCE_DIR}/lib/*.h)
file(GLOB LIB_SOURCES ${CMAKE_SOURCE_DIR}/lib/*.cpp)

file(GLOB APP_HEADERS ${CMAKE_SOURCE_DIR}/app/*.h)
file(GLOB APP_SOURCES ${CMAKE_SOURCE_DIR}/app/*.cpp)
file(GLOB APP_RESOURCES ${CMAKE_SOURCE_DIR}/app/*.rc)

add_library(${PROJECT_NAME} SHARED ${LIB_HEADERS} ${LIB_SOURCES})
add_executable(start-${PROJECT_NAME} ${APP_HEADERS} ${APP_SOURCES} ${APP_RESOURCES})

target_link_libraries(start-${PROJECT_NAME} ${PROJECT_NAME})
set_target_properties(start-${PROJECT_NAME} PROPERTIES CXX_STANDARD 17)

target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_richtext)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_adv)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_aui)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_gl)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_html)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_media)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_propgrid)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_ribbon)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_stc)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_webview)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_xrc)
target_link_libraries(start-${PROJECT_NAME} debug wxmsw31ud_core)
target_link_libraries(start-${PROJECT_NAME} debug wxbase31ud)
target_link_libraries(start-${PROJECT_NAME} debug wxbase31ud_net)
target_link_libraries(start-${PROJECT_NAME} debug wxbase31ud_xml)
target_link_libraries(start-${PROJECT_NAME} debug wxexpatd)
target_link_libraries(start-${PROJECT_NAME} debug wxjpegd)
target_link_libraries(start-${PROJECT_NAME} debug wxpngd)
target_link_libraries(start-${PROJECT_NAME} debug wxregexud)
target_link_libraries(start-${PROJECT_NAME} debug wxscintillad)
target_link_libraries(start-${PROJECT_NAME} debug wxtiffd)
target_link_libraries(start-${PROJECT_NAME} debug wxzlibd)

target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_richtext)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_adv)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_aui)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_gl)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_html)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_media)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_propgrid)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_ribbon)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_stc)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_webview)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_xrc)
target_link_libraries(start-${PROJECT_NAME} optimized wxmsw31u_core)
target_link_libraries(start-${PROJECT_NAME} optimized wxbase31u)
target_link_libraries(start-${PROJECT_NAME} optimized wxbase31u_net)
target_link_libraries(start-${PROJECT_NAME} optimized wxbase31u_xml)
target_link_libraries(start-${PROJECT_NAME} optimized wxexpat)
target_link_libraries(start-${PROJECT_NAME} optimized wxjpeg)
target_link_libraries(start-${PROJECT_NAME} optimized wxpng)
target_link_libraries(start-${PROJECT_NAME} optimized wxregexu)
target_link_libraries(start-${PROJECT_NAME} optimized wxscintilla)
target_link_libraries(start-${PROJECT_NAME} optimized wxtiff)
target_link_libraries(start-${PROJECT_NAME} optimized wxzlib)

target_link_libraries(start-${PROJECT_NAME} kernel32)
target_link_libraries(start-${PROJECT_NAME} user32)
target_link_libraries(start-${PROJECT_NAME} gdi32)
target_link_libraries(start-${PROJECT_NAME} comdlg32)
target_link_libraries(start-${PROJECT_NAME} winspool)
target_link_libraries(start-${PROJECT_NAME} winmm)
target_link_libraries(start-${PROJECT_NAME} shell32)
target_link_libraries(start-${PROJECT_NAME} comctl32)
target_link_libraries(start-${PROJECT_NAME} ole32)
target_link_libraries(start-${PROJECT_NAME} oleaut32)
target_link_libraries(start-${PROJECT_NAME} uuid)
target_link_libraries(start-${PROJECT_NAME} rpcrt4)
target_link_libraries(start-${PROJECT_NAME} advapi32)
target_link_libraries(start-${PROJECT_NAME} shlwapi)
target_link_libraries(start-${PROJECT_NAME} version)
target_link_libraries(start-${PROJECT_NAME} uxtheme)
target_link_libraries(start-${PROJECT_NAME} oleacc)

if (${CMAKE_C_COMPILER_ID} STREQUAL GNU)
target_link_libraries(${PROJECT_NAME} stdc++fs)
target_link_libraries(start-${PROJECT_NAME} stdc++fs)
endif()

if (${CMAKE_C_COMPILER_ID}  STREQUAL MSVC)
if(${CMAKE_BUILD_TYPE} STREQUAL Debug)
set_target_properties(start-${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "-D_CRTDBG_MAP_ALLOC /EHsc")
elseif(${CMAKE_BUILD_TYPE} STREQUAL Release OR ${CMAKE_BUILD_TYPE} STREQUAL MinSizeRel)
set_target_properties(start-${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "-DNDEBUG /EHsc")
set_target_properties(start-${PROJECT_NAME} PROPERTIES LINK_FLAGS "-SUBSYSTEM:WINDOWS -NXCOMPAT -DYNAMICBASE -LTCG")
endif()
endif()